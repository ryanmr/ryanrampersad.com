- title: "Docs for Developers: An Engineer’s Field Guide to Technical Writing"
  author: "Jared Bhatti, Zachary Sarah Corleissen, Jen Lambourne, David Nunez, Heidi Waterhouse"
  note: |
    While working on an internal platform, I felt like my _docs_ were _good_ but not good enough. I wanted my docs to help folks coming to the repositories have a vital anchor in their search for understanding. Without a technical writing on our team, this book was the next best option. In many ways, my docs were already tailored towards the lessons this book shares with you, however it gave me book based evidence to share with others to help the cause. If you have given a lot of consideration on what makes you happy with regards to developer documentation, then you may not need this. Keep in mind this is more _conceptual_ and does not go out of its way providing reusable templates or bullet lists of things you must put into your `README.md`. Instead, it guides you through scenarios so you consider the incoming personas and where they are in their journey, so you can prepare them the best way suited to their needs.
  read: 2022
  link: https://www.amazon.com/dp/1484272161

- title: "Empowered: Ordinary People, Extraordinary Products"
  author: "Marty Cagan, Chris Jones"
  note: |
    An engineering manager I follow on Twitter shared some photos of passages from the book he was reading. Those passages resonated quite well, so onwards to reading. I think what _Empowered_ offers is a confirmation that building a product is more than having a bunch of managers, a bunch of computer types and a bunch of people who talked to a customer casually three weeks ago sit in a room, and poof, the money comes flying out of the sky. At the same time, while I think this book discusses many value philosophical of building software in the 20's, it also has the same kind of _agile or else_ vibe to it that books likely had (and consulting pitches of today have). Putting _Product Managers_ in key positions without autonomy and agency is no more panacea than _Agile Coaches_ and _Scrum Masters_ were.
  read: 2021
  link: https://www.amazon.com/dp/111969129X

- title: "Staff Engineer: Leadership beyond the management track"
  author: "Will Larson"
  note: |
    This still a work in progress book for me. When you are in school, you often feel like that you're a junior and then a senior -- at the peak -- but then suddenly you are a freshmen again. At work, you think, I am senior engineer... finally... but wait, _what is next_? Staff Engineer is written by Will (same author as _An Elegant Puzzle_ as noted below), and it shares the non-manager pathway to continued career progression.
  read: 2021
  link: https://staffeng.com/book

- title: "The Pragmatic Programmer: your journey to mastery, 20th Anniversary Edition"
  author: "David Thomas, Andrew Hunt"
  note: |
    A good friend recommended this book during its prerelease phase, and the week of release I picked it up. For an engineer programming for a few years, if engaged in philosophical _"Am I really doing this right?"_ mixed with sufficient work variety, this book will likely reaffirm many of your approaches. Being the 20th anniversary edition of the original book, there are refreshed examples, even some using Elixir, and many older C and Java examples have either been removed or revised to keep up with modern approaches. This is a good book for an at-work bookclub -- the chapters are short enough for a weekly meetup, but has enough material and relatability that everyone can offer some perspective during discussions.

    This book is _not_ prescriptive, if you disagree with a portion, that is _fine_, you just need to know why.
  read: 2020
  link: https://www.amazon.com/dp/0135957052

- title: "An Elegant Puzzle: Systems of Engineering Management"
  author: "Will Larson"
  note: |
    I think I learned of this book through the occasional HackerNews book thread. Entering into a pseudo-management position at the time, it caught my eye. During my reading of _An Elegant Puzzle_, I felt philosophical alignment with Larson, while at times I think he stretched his advice too far and left the argument hanging without a conclusion or justification. Definitely a recommended read for intermediate and senior engineers, and of course those looking towards management. Finally, all of this is to say nothing of its well made printing − Stripe Press has gone out of its way to make a beautiful hardcover, with many full color pages, on thick paper stock.
  read: 2019
  link: https://www.amazon.com/gp/product/1732265186/

- title: "The Systems Bible: The Beginner's Guide to Systems Large and Small Paperback"
  author: "John Gall"
  note: |
    The Systems Bible is a strange book, in my opinion. It uses irony, exageration and some mix of satire and parody to portray how complexity piles up in systems and what that means.
  read: 2019
  link: https://www.amazon.com/gp/product/0961825170/

- title: "The Rust Programming Language"
  author: "Steve Klabnik"
  note: |
    Rust's entire "introduction to rust" book is available online for free, but it is great having that in _physical book_ format. For my purposes, it serves more as a reference to various examples I use to base specific implementations, or to refer to terms to search for elsewhere.
  read: 2019
  link: https://www.amazon.com/gp/product/1593278284/

- title: "A Philosophy of Software Design"
  author: "John Ousterhout"
  note:
  read: 2018
  link: https://www.amazon.com/gp/product/1732102201/

- title: "Clean Architecture: A Craftsman's Guide to Software Structure and Design"
  author: "Robert C. Martin"
  note:
  read: 2017
  link: https://www.amazon.com/gp/product/0134494164/

- title: "The Design of Everyday Things: Revised and Expanded Edition"
  author: "Don Norman"
  note: |
    As a part of a college reading list for a human computer interaction focused course, The Design of Everyday Things tells the story about the human factor in _design_. Norman explores core tenets of design, affordances, signifiers, mappings and more. While obviously aimed towards frontend inclined engineers, backend engineers may benefit being exposed to this mode of thinking.
  read: 2014
  link: https://www.amazon.com/gp/product/0465050654/
